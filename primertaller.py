# -*- coding: utf-8 -*-
"""primerTaller.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TwXZrbbMlqjGadz9iaxuaXWckP-Qz5P7

Fuente de los datos:

https://datosabiertos.bogota.gov.co/dataset/historico-siniestros-bogota-d-c/resource/f5862aaa-4e1c-463e-94d5-f04db8164360
"""

#Montar el drive, para no tener que cargar siempre el archivo al colab
from google.colab import drive
drive.mount('/content/drive')

import seaborn as sns
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import folium
from folium.plugins import MarkerCluster

#Se carga la data para poderla manipular
df = pd.read_csv('/content/drive/MyDrive/2- Unilibre/7moSemestre/programacionAvanzada/segundoCorte/data/historicoSiniestrosBogota.csv')
df.head(15)

#Eliminar columnas no necesarias
df = df.drop('X', axis=1)
df = df.drop('Y', axis=1)
df = df.drop('OBJECTID', axis=1)

#Se le da el formato de fecha a las columnas "FECHA_OCURRENCIA_ACC" y "FECHA_HORA_ACC"
df['FECHA_OCURRENCIA_ACC'] = pd.to_datetime(df['FECHA_OCURRENCIA_ACC'])
df['FECHA_HORA_ACC'] = pd.to_datetime(df['FECHA_HORA_ACC'])

#Se agrega el dia de la semana segun la fecha
df['DIA_ACC'] = df['FECHA_OCURRENCIA_ACC'].dt.day_name()
df['MES_ACC'] = df['FECHA_OCURRENCIA_ACC'].dt.month_name()

#Llenamos los datos faltantes con 0
df = df.fillna("0")

df

df.info()

"""# Mapa de ubicacion del siniestro"""

formulario = 'A000402862'

#Coordenadas de Bogota
latitud = 4.6097
longitud = -74.0817

# Crear objeto Map centrado en las coordenadas especificadas
mapa = folium.Map(location=[latitud, longitud], zoom_start=11)

# Crear objeto MarkerCluster para agregar múltiples marcadores
marker_cluster = MarkerCluster().add_to(mapa)

# Agregar marcador al mapa
folium.Marker([df.loc[df['FORMULARIO'] == formulario].LATITUD, df.loc[df['FORMULARIO'] == formulario].LONGITUD], popup=formulario).add_to(marker_cluster)


# Mostrar el mapa
mapa

"""# 1. Diez (10) gráficos (mínimo) con la librería Matplotlib

"""

plt.figure(figsize=(10,10))

df.ANO_OCURRENCIA_ACC.value_counts().plot.pie()
plt.title('Accidentes por año', fontweight = 'bold', fontsize=40, color = 'black')
plt.show()

fig, ax = plt.subplots(figsize=(30, 5))
df['MES_ACC'].value_counts().plot(kind='line', marker = 'x', linestyle = '-', color='red')

plt.xticks(rotation=0)
plt.xlabel('Mes del año', fontweight = 'bold', fontsize=20)
plt.ylabel('Numero de accidentes', fontweight = 'bold', fontsize=20)
plt.title('Numero de accidentes por mes del año', fontweight = 'bold', fontsize=40, color = 'black')

#Cuadricula
ax.grid(linestyle = '--', alpha = 0.3)

#Quitar unas margenes
ax.spines['top'].set_alpha(0.0)
ax.spines['right'].set_alpha(0.0)

plt.show()

fig, ax = plt.subplots(figsize=(30, 5))
df['DIA_ACC'].value_counts().plot(kind='line', marker = '*', linestyle = '-', color='ORANGE')

plt.xticks(rotation=0)
plt.xlabel('Dia de la semana', fontweight = 'bold', fontsize=20)
plt.ylabel('Numero de accidentes', fontweight = 'bold', fontsize=20)
plt.title('Numero de accidentes por dia de la semana', fontweight = 'bold', fontsize=40, color = 'black')

#Cuadricula
ax.grid(linestyle = '--', alpha = 0.3)

#Quitar unas margenes
ax.spines['top'].set_alpha(0.0)
ax.spines['right'].set_alpha(0.0)

plt.show()

grupo = df.groupby(['ANO_OCURRENCIA_ACC', 'GRAVEDAD']).size().reset_index(name='cantidad')

# Graficar los datos utilizando un gráfico de barras apiladas
grafica = grupo.pivot(index='ANO_OCURRENCIA_ACC', columns='GRAVEDAD', values='cantidad').plot(kind='bar', stacked=True, figsize=(30, 6))

# Agregar etiquetas y título a la gráfica
plt.xlabel('Año')
plt.ylabel('Cantidad')
plt.title('Cantidad de datos de gravedad por año')

# Mostrar la gráfica
plt.show()

fig, ax = plt.subplots(figsize=(30, 5))

plt.hist(df.CLASE_ACC, bins = 7)
plt.title('Hostograma clase de accidente', fontweight = 'bold', fontsize=40, color = 'black')

#Cuadricula
ax.grid(linestyle = '--', alpha = 0.3)

#Quitar unas margenes
ax.spines['top'].set_alpha(0.0)
ax.spines['right'].set_alpha(0.0)

plt.show()

#Gráfico de barras para datos categóricos

fig, ax = plt.subplots(figsize=(30, 5))
df['ANO_OCURRENCIA_ACC'].value_counts().plot(kind='bar')

plt.xticks(rotation=0)
plt.xlabel('Año', fontweight = 'bold', fontsize=20)
plt.ylabel('Numero de accidentes', fontweight = 'bold', fontsize=20)
plt.title('Accidentes por año', fontweight = 'bold', fontsize=40, color = 'black')

#Cuadricula
ax.grid(linestyle = '--', alpha = 0.3)

#Quitar unas margenes
ax.spines['top'].set_alpha(0.0)
ax.spines['right'].set_alpha(0.0)

plt.show()

fig, ax = plt.subplots(figsize=(30, 5))
df['CLASE_ACC'].value_counts().plot(kind='line', marker = 'o', linestyle = '-.', color='green')

plt.xticks(rotation=0)
plt.xlabel('Clase de accidente', fontweight = 'bold', fontsize=20)
plt.ylabel('Numero de accidentes', fontweight = 'bold', fontsize=20)
plt.title('Clase de accidente', fontweight = 'bold', fontsize=40, color = 'black')

#Cuadricula
ax.grid(linestyle = '--', alpha = 0.3)

#Quitar unas margenes
ax.spines['top'].set_alpha(0.0)
ax.spines['right'].set_alpha(0.0)

plt.show()

fig, ax = plt.subplots(figsize=(30, 5))

frecuencias = df['LOCALIDAD'].value_counts()
frecuencias.plot(kind='bar', color = 'red')
plt.xticks(rotation=90)
plt.xlabel('Localidad', fontweight = 'bold', fontsize=20)
plt.ylabel('Numero de accidentes', fontweight = 'bold', fontsize=20)
plt.title('Acidentes por localidad', fontweight = 'bold', fontsize=40, color = 'black')

#Cuadricula
ax.grid(linestyle = '--', alpha = 0.3)

#Quitar unas margenes
ax.spines['top'].set_alpha(0.0)
ax.spines['right'].set_alpha(0.0)

plt.show()

fig, ax = plt.subplots(figsize=(30, 5))

plt.boxplot(df['ANO_OCURRENCIA_ACC'])

plt.title('Distribución de valores', fontweight = 'bold', fontsize=40, color = 'black')
plt.ylabel('Año', fontweight = 'bold', fontsize=20)

plt.show()

plt.figure(figsize=(40,40))

df.plot(kind='scatter', x='LATITUD', y='LONGITUD', figsize=(30, 6))
plt.show()

plt.figure(figsize=(10,10))

df.GRAVEDAD.value_counts().plot.pie()
plt.title('Participacion por tipo de accidentes', fontweight = 'bold', fontsize=40, color = 'black')
plt.show()

grupo = df.groupby(['ANO_OCURRENCIA_ACC', 'CLASE_ACC']).size().reset_index(name='cantidad')

# Graficar los datos utilizando un gráfico de barras apiladas
grafica = grupo.pivot(index='ANO_OCURRENCIA_ACC', columns='CLASE_ACC', values='cantidad').plot(kind='bar', stacked=True, figsize=(30, 6))

# Agregar etiquetas y título a la gráfica
plt.xlabel('Año')
plt.ylabel('Cantidad')
plt.title('Cantidad de datos de gravedad por año')

# Mostrar la gráfica
plt.show()

"""# 2. Cinco (5) gráficos (mínino) con la librería Seaborn"""

df.head(15)

sns.pairplot(df, hue="LOCALIDAD")

sns.pairplot(df, hue="GRAVEDAD")

plt.figure(figsize=(30,5))
sns.histplot(data=df, x="ANO_OCURRENCIA_ACC")

plt.figure(figsize=(30,5))
sns.histplot(data=df, y="LOCALIDAD")

plt.figure(figsize=(30,5))
sns.kdeplot(df['ANO_OCURRENCIA_ACC'], bw=0.5)

plt.figure(figsize=(30,5))
sns.distplot(df['ANO_OCURRENCIA_ACC'])

plt.figure(figsize=(30,5))
sns.countplot(y='LOCALIDAD', data=df)

sns.set_style('whitegrid')
plt.figure(figsize=(10,8))
ax = sns.countplot(x='DIA_SEMANA', data=df)
ax.set_xticklabels(ax.get_xticklabels(), rotation=90)
plt.show()

sns.set_style('whitegrid')
plt.figure(figsize=(30,5))
ax = sns.countplot(x='LOCALIDAD', data=df)
ax.set_xticklabels(ax.get_xticklabels(), rotation=90)
plt.show()

plt.figure(figsize=(30,5))
df1 = df[df['LOCALIDAD']=="ENGATIVA"]
df2 = df[df['LOCALIDAD']=="PUENTE ARANDA"]
df3 = df[df['LOCALIDAD']=="USAQUEN"]
df4 = df[df['LOCALIDAD']=="CIUDAD BOLIVAR"]
df5 = df[df['LOCALIDAD']=="LOS MARTIRES"]
df6 = df[df['LOCALIDAD']=="SUBA"]
df7 = df[df['LOCALIDAD']=="FONTIBON"]
df8 = df[df['LOCALIDAD']=="USME"]
df9 = df[df['LOCALIDAD']=="TEUSAQUILLO"]
df10 = df[df['LOCALIDAD']=="BARRIOS UNIDOS"]
df11 = df[df['LOCALIDAD']=="RAFAEL URIBE URIBE"]
df12 = df[df['LOCALIDAD']=="CHAPINERO"]
df13 = df[df['LOCALIDAD']=="KENNEDY"]
df14 = df[df['LOCALIDAD']=="ANTONIO NARINO"]
df15 = df[df['LOCALIDAD']=="BOSA"]
df16 = df[df['LOCALIDAD']=="SAN CRISTOBAL"]
df17 = df[df['LOCALIDAD']=="CANDELARIA"]
df18 = df[df['LOCALIDAD']=="TUNJUELITO"]
df19 = df[df['LOCALIDAD']=="SANTA FE"]
df20 = df[df['LOCALIDAD']=="SUMAPAZ"]

sns.kdeplot(df1['ANO_OCURRENCIA_ACC'], bw=0.5)
sns.kdeplot(df2['ANO_OCURRENCIA_ACC'], bw=0.5)
sns.kdeplot(df3['ANO_OCURRENCIA_ACC'], bw=0.5)
sns.kdeplot(df4['ANO_OCURRENCIA_ACC'], bw=0.5)
sns.kdeplot(df5['ANO_OCURRENCIA_ACC'], bw=0.5)
sns.kdeplot(df6['ANO_OCURRENCIA_ACC'], bw=0.5)
sns.kdeplot(df7['ANO_OCURRENCIA_ACC'], bw=0.5)
sns.kdeplot(df8['ANO_OCURRENCIA_ACC'], bw=0.5)
sns.kdeplot(df9['ANO_OCURRENCIA_ACC'], bw=0.5)
sns.kdeplot(df10['ANO_OCURRENCIA_ACC'], bw=0.5)
sns.kdeplot(df11['ANO_OCURRENCIA_ACC'], bw=0.5)
sns.kdeplot(df12['ANO_OCURRENCIA_ACC'], bw=0.5)
sns.kdeplot(df13['ANO_OCURRENCIA_ACC'], bw=0.5)
sns.kdeplot(df14['ANO_OCURRENCIA_ACC'], bw=0.5)
sns.kdeplot(df15['ANO_OCURRENCIA_ACC'], bw=0.5)
sns.kdeplot(df16['ANO_OCURRENCIA_ACC'], bw=0.5)
sns.kdeplot(df17['ANO_OCURRENCIA_ACC'], bw=0.5)
sns.kdeplot(df18['ANO_OCURRENCIA_ACC'], bw=0.5)
sns.kdeplot(df19['ANO_OCURRENCIA_ACC'], bw=0.5)
sns.kdeplot(df20['ANO_OCURRENCIA_ACC'], bw=0.5)

plt.show()

#mapa de calor
sns.heatmap(data=df.corr())

sns.lineplot(x='LATITUD', y='LONGITUD', data=df)

sns.kdeplot(data=df, x='ANO_OCURRENCIA_ACC')

sns.scatterplot(x='ANO_OCURRENCIA_ACC', y=(df['DIA_ACC']=="Friday"), data=df)

sns.lineplot(x='ANO_OCURRENCIA_ACC', y='ANO_OCURRENCIA_ACC', data=df)

sns.histplot(data=df, x='ANO_OCURRENCIA_ACC', kde=True)

"""# 3. Cinco (5) gráficos (mínino) con la libreria Boken"""

pip install bokeh

from bokeh.io import output_notebook, show
from bokeh.plotting import figure
from bokeh.transform import factor_cmap
from bokeh.models import ColumnDataSource, HoverTool
from bokeh.palettes import Spectral6
import pandas as pd

# Calcular la cantidad de accidentes por gravedad
counts = df.groupby('GRAVEDAD').size().reset_index(name='counts')

# Crear una fuente de datos de Bokeh
source = ColumnDataSource(counts)

# Configurar los colores para cada barra del histograma
colors = factor_cmap('GRAVEDAD', palette=Spectral6, factors=sorted(df['GRAVEDAD'].unique()))

# Crear la figura
p = figure(title='Histograma de la gravedad de los accidentes', x_range=counts['GRAVEDAD'], plot_height=400, plot_width=800)

# Agregar las barras al histograma
p.vbar(x='GRAVEDAD', top='counts', width=0.9, source=source, color=colors)

# Configurar las opciones de visualización
p.xaxis.axis_label = 'Gravedad'
p.yaxis.axis_label = 'Cantidad de accidentes'
p.xaxis.major_label_orientation = 1.2

# Mostrar la figura
output_notebook()
show(p)

from bokeh.io import output_notebook, show
from bokeh.plotting import figure
from bokeh.models import ColumnDataSource, LinearColorMapper, ColorBar
from bokeh.palettes import Plasma256
import pandas as pd

# Calcular la cantidad de accidentes por mes
counts = df.groupby(['MES_ACC', 'LOCALIDAD']).size().reset_index(name='counts')

# Crear una fuente de datos de Bokeh
source = ColumnDataSource(counts)

# Crear un mapa de calor con la cantidad de accidentes por mes y localidad
mapper = LinearColorMapper(palette=Plasma256, low=0, high=max(counts['counts']))
p = figure(title='Mapa de calor de los accidentes por mes', plot_width=800, plot_height=400, x_range=counts['MES_ACC'].unique(), y_range=counts['LOCALIDAD'].unique())
p.rect(x='MES_ACC', y='LOCALIDAD', width=1, height=1, source=source, line_color=None, fill_color={'field': 'counts', 'transform': mapper})

# Agregar la barra de colores al mapa de calor
color_bar = ColorBar(color_mapper=mapper, location=(0, 0))
p.add_layout(color_bar, 'right')

# Configurar las opciones de visualización
p.xaxis.axis_label = 'Mes'
p.yaxis.axis_label = 'Localidad'

# Mostrar la figura
output_notebook()
show(p)

from bokeh.io import output_notebook, show
from bokeh.plotting import figure
from bokeh.transform import factor_cmap
from bokeh.models import ColumnDataSource, HoverTool
from bokeh.palettes import Spectral6
import pandas as pd

# Calcular la cantidad de accidentes por día de la semana
counts = df.groupby('DIA_ACC').size().reset_index(name='counts')

# Crear una fuente de datos de Bokeh
source = ColumnDataSource(counts)

# Configurar los colores para cada barra del gráfico de barras
colors = factor_cmap('DIA_ACC', palette=Spectral6, factors=sorted(df['DIA_ACC'].unique()))

# Crear la figura
p = figure(title='Gráfico de barras de los accidentes por día de la semana', x_range=counts['DIA_ACC'], plot_height=400, plot_width=800)

# Agregar las barras al gráfico de barras
p.vbar(x='DIA_ACC', top='counts', width=0.9, source=source, color=colors)

# Configurar las opciones de visualización
p.xaxis.axis_label = 'Día de la semana'
p.yaxis.axis_label = 'Cantidad de accidentes'
p.add_tools(HoverTool(tooltips=[('Cantidad', '@counts')]))

# Mostrar la figura
output_notebook()
show(p)

from bokeh.io import output_notebook, show
from bokeh.plotting import figure
from bokeh.transform import factor_cmap
from bokeh.models import ColumnDataSource, HoverTool
from bokeh.palettes import Spectral11
import pandas as pd

# Calcular la cantidad de accidentes por localidad
counts = df.groupby('LOCALIDAD').size().reset_index(name='counts')

# Ordenar las localidades por cantidad de accidentes
counts = counts.sort_values(by=['counts'], ascending=False)

# Crear una fuente de datos de Bokeh
source = ColumnDataSource(counts)

# Configurar los colores para cada barra del gráfico de barras
colors = factor_cmap('LOCALIDAD', palette=Spectral11, factors=sorted(df['LOCALIDAD'].unique()))

# Crear la figura
p = figure(title='Gráfico de barras de los accidentes por localidad', x_range=counts['LOCALIDAD'], plot_height=400, plot_width=800)

# Agregar las barras al gráfico de barras
p.vbar(x='LOCALIDAD', top='counts', width=0.9, source=source, color=colors)

# Configurar las opciones de visualización
p.xaxis.axis_label = 'Localidad'
p.yaxis.axis_label = 'Cantidad de accidentes'
p.xaxis.major_label_orientation = 1.2
p.add_tools(HoverTool(tooltips=[('Cantidad', '@counts')]))

# Mostrar la figura
output_notebook()
show(p)

from bokeh.io import output_notebook, show
from bokeh.plotting import figure
from bokeh.transform import factor_cmap
from bokeh.models import ColumnDataSource, HoverTool
from bokeh.palettes import Spectral8
import pandas as pd

# Calcular la cantidad de accidentes por gravedad y clase
counts = df.groupby(['GRAVEDAD', 'CLASE_ACC']).size().reset_index(name='counts')

# Concatenar las columnas GRAVEDAD y CLASE_ACC con un guión medio
counts['GRAVEDAD_CLASE_ACC'] = counts['GRAVEDAD'] + ' - ' + counts['CLASE_ACC']

# Crear una fuente de datos de Bokeh
source = ColumnDataSource(counts)

# Configurar los colores para cada barra del gráfico de barras apiladas
colors = factor_cmap('GRAVEDAD', palette=Spectral8, factors=sorted(df['GRAVEDAD'].unique()))

# Crear la figura
p = figure(title='Gráfico de barras apiladas de los accidentes por gravedad y clase', x_range=counts['GRAVEDAD_CLASE_ACC'], plot_height=400, plot_width=800)

# Agregar las barras apiladas al gráfico de barras
p.vbar(x='GRAVEDAD_CLASE_ACC', top='counts', width=0.9, source=source, color=colors, legend_field='GRAVEDAD')

# Configurar las opciones de visualización
p.xaxis.axis_label = 'Gravedad - Clase'
p.yaxis.axis_label = 'Cantidad de accidentes'
p.xaxis.major_label_orientation = 1.2
p.add_tools(HoverTool(tooltips=[('Cantidad', '@counts')]))
p.legend.orientation = 'horizontal'
p.legend.location = 'top_center'

# Mostrar la figura
output_notebook()
show(p)